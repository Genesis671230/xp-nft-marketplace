
  //   const transaction = await marketplace.createListing({
      //     assetContractAddress: contractAddress, // Contract Address of the NFT
      //     buyoutPricePerToken: price, // Maximum price, the auction will end immediately if a user pays this price.
      //     currencyContractAddress: NATIVE_TOKEN_ADDRESS, // NATIVE_TOKEN_ADDRESS is the crpyto curency that is native to the network. i.e. Goerli ETH.
      //     listingDurationInSeconds: 60 * 60 * 24 * 7, // When the auction will be closed and no longer accept bids (1 Week)
      //     quantity: 1, // How many of the NFTs are being listed (useful for ERC 1155 tokens)
      //     reservePricePerToken: 0, // Minimum price, users cannot bid below this amount
      //     startTimestamp: new Date(), // When the listing will start
      //     tokenId: tokenId, // Token ID of the NFT.
      //   });
      //   console.log(transaction);

      //   return transaction;
// const provider = new ethers.providers.JsonRpcProvider(
    //   "https://polygon-rpc.com"
    // );
    // const signer = provider.getSigner();
    // const contractMarketplace = new ethers.Contract(
    //   "0x42182Ebad491D869dAafe47Fc6464F2089f8BB5a",
    //   marketplaceAbi,
    //   signer
    // );


// const provider = new ethers.providers.JsonRpcProvider(
    //   "https://rpc-mumbai.maticvigil.com"
    // );
    // const signer = provider.getSigner();
    // const contractMarketplace = new ethers.Contract(
    //   "0x42182Ebad491D869dAafe47Fc6464F2089f8BB5a",
    //   marketplaceAbi,
    //   signer
    // );

    // const ListingParameters = {
    //   assetContract: "0x42182Ebad491D869dAafe47Fc6464F2089f8BB5a",
    //   tokenId: "0",
    //   startTime: new Date(),
    //   secondsUntilEndTime: 60 * 60 * 24 * 7,
    //   quantityToLis: 1,
    //   currencyToAccept: NATIVE_TOKEN_ADDRESS,
    //   reservePricePerToken: 1,
    //   buyoutPricePerToken: "0",
    //   listingType: 0,
    // };

// const getListings = async () => {
  //   try {
  //     const provider = new ethers.providers.JsonRpcProvider(
  //       "https://rpc-mumbai.maticvigil.com/"
  //     );
  //     const contract = new ethers.Contract(
  //       "0x42182Ebad491D869dAafe47Fc6464F2089f8BB5a",
  //       marketplaceAbi,
  //       provider
  //     );
  //     const validParams = [
  //       "listingId",
  //       "tokenOwner",
  //       "assetContract",
  //       "tokenId",
  //       "startTime",
  //       "endTime",
  //       "quantity",
  //       "currency",
  //       "reservePricePerToken",
  //       "buyoutPricePerToken",
  //       "tokenType",
  //       "listingTyp",
  //     ];
  //     const allActiveListings =
  //       await marketplaceContract?.contract?.getActiveListings();

  //     const activeListingsWithOffers = allActiveListings.map(async (item) => {
  //       const offers = await marketplaceContract.contract.getOffers(item.id);
  //       console.log(offers);

  //       return { ...item, offers: offers };
  //     });
  //     setAllListings(activeListingsWithOffers);

  //     // const totalListingsBigNumber = await contract?.totalListings();
  //     // const totalListings = Number(totalListingsBigNumber)
  //     // console.log(allActiveListings);

  //     // const allListingsArray = [];

  //     // for (let i = 1; i <= allActiveListings?.length; i++) {
  //     //   const listings = await contract?.listings(i);
  //     //   const organizedData = Object.entries(listings)
  //     //     .filter((item) => validParams.includes(item[0]))
  //     //     .reduce((acc, item) => {
  //     //       if (item[0] === "startTime") {
  //     //         const startTime = Number(item[1]);
  //     //         const newData = new Date(startTime).getTime();
  //     //         acc[item[0]] = newData;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "endTime") {
  //     //         const endTime = Number(item[1]);
  //     //         const newData = new Date(endTime).getTime();
  //     //         acc[item[0]] = newData;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "listingId") {
  //     //         const listingId = Number(item[1]);

  //     //         acc[item[0]] = listingId;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "quantity") {
  //     //         const quantity = Number(item[1]);

  //     //         acc[item[0]] = quantity;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "reservePricePerToken") {
  //     //         const ether = ethers.utils.formatEther(item[1]);

  //     //         acc[item[0]] = ether;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "buyoutPricePerToken") {
  //     //         const ether = ethers.utils.formatEther(item[1]);

  //     //         acc[item[0]] = ether;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "tokenId") {
  //     //         const tokenId = Number(item[1]);

  //     //         acc[item[0]] = tokenId;
  //     //         return acc;
  //     //       }
  //     //       if (item[0] === "reservePricePerToken") {
  //     //         const ether = (item[1] / 10) * 18;

  //     //         acc[item[0]] = ether;
  //     //         return acc;
  //     //       }

  //     //       acc[item[0]] = item[1];
  //     //       return acc;
  //     //     }, {});

  //     //   const singleNftMetadata = await fetchTokenData(organizedData?.tokenId);
  //     //   console.log(singleNftMetadata,allListingsArray);
  //     //   allListingsArray.push({
  //     //     ...organizedData,
  //     //     nftMetadata: singleNftMetadata,
  //     //   });
  //     // }
  //     // setAllListings(allListingsArray);
  //   } catch (error) {
  //     console.log(error);
  //   }
  // };
